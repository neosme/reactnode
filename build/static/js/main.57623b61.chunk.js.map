{"version":3,"sources":["const/backend.js","utils/alert.js","components/table/tableView.js","App.js","serviceWorker.js","index.js"],"names":["nodeConnect","Alert","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorMessage","inherits","createClass","key","value","react_default","a","createElement","message","description","type","showIcon","Component","TableView","callAPI","fetch","constants","then","response","json","responseJSON","setState","data","e","alertView","errorMsg","alert_Alert","onViewRow","text","record","modalData","modalVisible","handleModalCancel","renderTable","columns","table","pagination","dataSource","bordered","renderModal","modal","title","visible","onCancel","footer","FirstName","LastName","DOB","Salary","_this2","_this$state","dataIndex","render","width","className","icon","onClick","card","App","tableView_TableView","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57623b61.chunk.js","sourcesContent":["export const nodeConnect = 'http://localhost:9000/employee/api/all'\r\n","import React, {Component} from 'react';\r\nimport {Card, Icon, Modal, Table, Text, alert} from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nexport class Alert extends Component {\r\n\r\n    //Constructor will be called initially whenever the page is rendered.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: this.props.errorMessage\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const {errorMessage} = this.state;\r\n\r\n        return (\r\n            <Alert\r\n                message=\"Error\"\r\n                description= {errorMessage}\r\n                type=\"error\"\r\n                showIcon\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alert;\r\n","import React, {Component} from 'react';\r\nimport {Card, Icon, Modal, Table} from 'antd';\r\nimport * as constants from '../../const/backend';\r\nimport 'antd/dist/antd.css';\r\nimport '../../utils/alert'\r\nimport {Alert} from \"../../utils/alert\";\r\n\r\nexport class TableView extends Component {\r\n\r\n    //Constructor will be called initially whenever the page is rendered.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            modalVisible: false,\r\n            modalData: {}\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.callAPI();\r\n    }\r\n\r\n    //Handle connection with node\r\n    callAPI = () => {\r\n        try {\r\n            fetch(constants.nodeConnect)\r\n                .then((response) => response.json())\r\n                .then((responseJSON) => {\r\n                    // do stuff with responseJSON here...\r\n                    this.setState({\r\n                        data: responseJSON\r\n                    })\r\n                });\r\n        }\r\n        catch (e) {\r\n            this.alertView(e)\r\n        }\r\n    }\r\n\r\n    alertView = (errorMsg) => {\r\n        return (\r\n            <Alert errorMessage={errorMsg}/>\r\n        )\r\n    }\r\n\r\n    //When each table row is selected\r\n    onViewRow = (text, record, key) => {\r\n        try {\r\n            this.setState({\r\n                modalData: record\r\n            }, () => {\r\n                this.setState({\r\n                    modalVisible: true\r\n                })\r\n            })\r\n        }\r\n        catch (e) {\r\n            this.alertView(e)\r\n        }\r\n    }\r\n\r\n    //\r\n    handleModalCancel = () => {\r\n        try {\r\n            this.setState({\r\n                modalVisible: false\r\n            })\r\n        }\r\n        catch (e) {\r\n            this.alertView(e)\r\n        }\r\n    }\r\n\r\n    renderTable = (data, columns) => {\r\n        try {\r\n            return (\r\n                <Table\r\n                    pagination={false}\r\n                    dataSource={this.state.data}\r\n                    columns={columns}\r\n                    bordered={true}\r\n                    key={'table'}\r\n                />\r\n            )\r\n        }\r\n        catch (e) {\r\n            this.alertView(e)\r\n        }\r\n    }\r\n\r\n    renderModal = (modalVisible, modalData,) => {\r\n        try {\r\n            return (\r\n                <Modal\r\n                    title=\"Detailed View\"\r\n                    visible={modalVisible}\r\n                    onCancel={this.handleModalCancel}\r\n                    footer={null}\r\n                >\r\n                    <p><b>First Name:</b> {modalData.FirstName}</p>\r\n                    <p><b>Last Name:</b> {modalData.LastName}</p>\r\n                    <p><b>DOB:</b> {modalData.DOB}</p>\r\n                    <p><b>Salary:</b> Rs {modalData.Salary}</p>\r\n                </Modal>\r\n            )\r\n        }\r\n        catch (e) {\r\n            this.alertView(e)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {data, modalVisible, modalData} = this.state;\r\n\r\n        const columns = [\r\n            {\r\n                title: 'First Name',\r\n                dataIndex: 'FirstName',\r\n                key: 'FirstName',\r\n            },\r\n            {\r\n                title: 'Last Name',\r\n                dataIndex: 'LastName',\r\n                key: 'LastName',\r\n            },\r\n            {\r\n                title: 'DOB',\r\n                dataIndex: 'DOB',\r\n                key: 'DOB',\r\n            },\r\n            {\r\n                title: 'Salary',\r\n                dataIndex: 'Salary',\r\n                key: 'Salary',\r\n                render: (text, record, key) => {\r\n                    return <div>Rs {text}</div>\r\n                }\r\n            },\r\n            {\r\n                title: 'View',\r\n                dataIndex: 'operation',\r\n                width: 50,\r\n                key: 'edit',\r\n                className: 'scrollableColumn',\r\n                render: (text, record, key) => {\r\n                    return <Icon type=\"eye\" onClick={() => this.onViewRow(text, record, key)}/>\r\n                }\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <Card className=\"onBoardingScreen\">\r\n                <div className=\"onBoardingScreen\">\r\n                    {this.renderTable(data, columns)}\r\n                    {this.renderModal(modalVisible, modalData)}\r\n                </div>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableView;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TableView} from \"./components/table/tableView\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <TableView />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}